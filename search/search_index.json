{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ashraful Islam","text":"<p>Welcome to my personal website. I am Ashraful Islam. I am passionate about learning new technologies and applying them to solve real-world problems.</p> <p>I am currently tinkering with on-device inference of LLMs to create a privacy-preserving AI assistant. I am also auding a backend development course from boot.dev to improve my backend development skills.</p> <p>Check out my recent projects here</p>"},{"location":"#socials","title":"Socials","text":"<p>If you want to get in touch with me you can find me as 1-ashraful-islam on  Github, and  LinkedIn, or a__islam on  X (Twitter)</p>"},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#go","title":"Go","text":"<ul> <li>Color Image to ASCII Art Converter in Go</li> <li>Pok\u00e9dex CLI</li> </ul>"},{"location":"tags/#html5","title":"HTML5","text":"<ul> <li>Maze Generator and Solver</li> </ul>"},{"location":"tags/#html5-canvas","title":"HTML5 Canvas","text":"<ul> <li>Maze Generator and Solver</li> <li>Pong Wars - Yin Yang Edition</li> </ul>"},{"location":"tags/#javascript","title":"JavaScript","text":"<ul> <li>Maze Generator and Solver</li> <li>Pong Wars - Yin Yang Edition</li> <li>Web Crawler</li> </ul>"},{"location":"tags/#mkdocs","title":"MkDocs","text":"<ul> <li>Easy way to add Cover Image in Material for MkDocs Blogs</li> </ul>"},{"location":"tags/#nodejs","title":"Node.js","text":"<ul> <li>Web Crawler</li> </ul>"},{"location":"tags/#python","title":"Python","text":"<ul> <li>Maze Generator and Solver</li> </ul>"},{"location":"tags/#python-tkinter","title":"Python Tkinter","text":"<ul> <li>Maze Generator and Solver</li> </ul>"},{"location":"tags/#reflection","title":"Reflection","text":"<ul> <li>Why habit apps suck, or do they?</li> </ul>"},{"location":"tags/#techtips","title":"TechTips","text":"<ul> <li>Easy way to add Cover Image in Material for MkDocs Blogs</li> </ul>"},{"location":"tags/#productiviy","title":"productiviy","text":"<ul> <li>Why habit apps suck, or do they?</li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/02/28/easy-way-to-add-cover-image-in-material-for-mkdocs-blogs/","title":"Easy way to add Cover Image in Material for MkDocs Blogs","text":"<p> Image created by OpenAI's DALL\u00b7E</p> <p>Incorporating a figure with a caption in markdown can be cumbersome, especially if you're aiming for specific styling. Directly adding an image with a caption through raw HTML requires extensive boilerplate for each image, which isn't ideal for every cover image in your content.</p> <p>Here's how I used Attribute Lists (1) markdown extension to streamline the process.</p> <ol> <li>Attribute Lists extension allows you to add HTML attributes and CSS classes to markdown elements. You can enable it in your <code>mkdocs.yml</code> file by adding the following configuration: <pre><code>markdown_extensions:\n  - attr_list\n</code></pre></li> </ol> <p>The goal was to integrate a cover image into MkDocs blog posts with the following criteria:</p> <ul> <li>Customizable styling options</li> <li>Caption alignment at the center of the image</li> <li>Placement of the cover image above tags and titles</li> <li>A smaller/concise preview of the cover image on the index page to avoid overcrowding</li> </ul> <p>A straightforward approach involves inserting the image using markdown syntax and adding a caption below it, as discussed in this thread. However, this method doesn't utilize meta-data for rendering the title, so you have to manually type it again. It also results in the image being displayed at full size on the index page, which might not be desirable in the post excerpts. For comprehensive reference on images, refer to the Material for MkDocs official documentation here. However, this guide did not solve my specific requirements.</p> <p>Here's a succinct method to achieve the desired outcome using a clever workaround:</p> <p>Prerequisites</p> <p>To enable customization, first ensure <code>extra.css</code> is included in your <code>mkdocs.yml</code>, following these instructions.</p> <code>your-blog-post.md</code> <code>/docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>  ![Image Description](/path/to/your/image.png)\n  *Your image caption*\n  {.cover-image}\n</code></pre> <p>Tip for the blog post</p> <p>Make sure to have at least one line gap after the <code>{.cover-image}</code> tag. And one line above the image link if it is not the first element. This ensures the image and the <code>&lt;em&gt;</code> is rendered as a single block as below. <pre><code>&lt;p class=\"cover-image\"&gt;\n  &lt;img src=\"/path/to/your/image.png\" alt=\"Image Description\"&gt;\n  &lt;em&gt;Your image caption&lt;/em&gt;\n&lt;/p&gt;\n</code></pre></p> <pre><code>  .md-content__inner {\n  display: grid; /*(1)!This hack enables ordering of elements*/\n  }\n\n  .cover-image {\n    order: -1; /*(2)!This hack moves the cover image above the title*/\n    display: grid;\n    width: 75%;\n    margin: 0 auto;\n\n    em {\n      font-size: 0.8em;\n      text-align: center;\n      color: gray;\n    }\n  }\n\n  .md-post--excerpt .cover-image { /*(3)!This setting is for index page*/\n    width: 20%;\n    float: left;\n    margin: 0 1em 1em 0;\n\n    em {\n      display: none;\n    }\n  }\n\n  .md-post--excerpt::after { /*(4)! */\n    content: \"\";\n    display: table;\n    clear: both;\n  }\n</code></pre> <ol> <li> This hack enables ordering of elements</li> <li> This hack moves the cover image above the title</li> <li> This setting is for making the image smaller in the index page</li> <li> Please note that floating elements can sometimes cause layout issues, so it's a good idea to clear the float after the floating elements. You can do this by applying the\u00a0<code>clearfix</code>\u00a0hack to the parent element like it's done here. This will ensure that the\u00a0<code>.md-post--excerpt</code>\u00a0element's height takes into account the floated\u00a0<code>.cover-image</code>\u00a0element.</li> </ol> <pre><code>  extra_css:\n    - stylesheets/extra.css # (1)! This is for custom styling\n  markdown_extensions:\n    - attr_list # (2)! This is for adding classes to markdown elements\n</code></pre> <ol> <li>This is to enable custom style by extending the theme</li> <li>This adds the ability to add classes to markdown elements    <pre><code>## Title {.class-name}\n</code></pre></li> </ol> <p>How do you add cover image in your MkDocs blog?</p> <p>Do you have a easier way to add cover images in your MkDocs blog? Would love to hear your thoughts and experiences.</p>","tags":["MkDocs","TechTips"]},{"location":"blog/2024/02/27/why-habit-apps-suck-or-do-they/","title":"Why habit apps suck, or do they?","text":"<p> Image created by OpenAI's DALL\u00b7E</p> <p>I started using a habit-tracking app to keep my goals in check, and it was going great for the first five weeks. Then, I decided to tweak my strategy, thinking it would enhance my productivity. Fast forward three weeks, and I haven't opened the app since.</p> <p>So, what exactly went south? Here's a quick dive into my experience.</p>","tags":["Reflection","productiviy"]},{"location":"blog/2024/02/27/why-habit-apps-suck-or-do-they/#initial-strategy-embracing-small-wins","title":"Initial Strategy: Embracing Small Wins","text":"<p>At the outset, I had a pretty straightforward approach: break down my tasks into bite-sized chunks. I laid out how many hours I aimed to dedicate to each goal weekly and split it into specific durations and frequencies. My initial setup looked something like this:</p> <ul> <li>15 minutes of practicing fast typing, four days a week.</li> <li>30 minutes of reading a book, three days a week.</li> <li>3 hours of working through LeetCode problems, five days a week.</li> <li>3 hours of backend developer projects or courses from boot.dev, three days a week</li> <li>45 minutes of job hunting, five days a week.</li> </ul> <p>This approach made it easier to mark off tasks and bask in the satisfaction of completing them. The smaller goals kept me moving forward.</p>","tags":["Reflection","productiviy"]},{"location":"blog/2024/02/27/why-habit-apps-suck-or-do-they/#adjusting-course-introducing-a-new-approach","title":"Adjusting Course: Introducing a New Approach","text":"<p>There were days when life happened, and I couldn't complete a task fully. For instance, managing only 2 hours on LeetCode instead of 3. Not being able to check off that task felt demotivating.</p> <p>That's when I discovered a feature in the app that allowed tracking total hours spent on activities weekly. It sounded like a game-changer, so I switched all my goals to this new format.</p>","tags":["Reflection","productiviy"]},{"location":"blog/2024/02/27/why-habit-apps-suck-or-do-they/#unforeseen-challenges-reflections-on-change","title":"Unforeseen Challenges: Reflections on Change","text":"<p>Initially, the change seemed to work okay, but soon the lack of instant gratification from ticking off tasks daily started to weigh on me. The satisfaction was postponed until I had accumulated all the hours for the week.</p> <p>Gradually, I found myself avoiding logging my hours in the app. This didn't mean I stopped working on my tasks; I just wasn't recording it anymore. Eventually, I lost track of how much time I was actually spending on each task and whether I was hitting my goals.</p>","tags":["Reflection","productiviy"]},{"location":"blog/2024/02/27/why-habit-apps-suck-or-do-they/#key-takeaways-lessons-learned","title":"Key Takeaways: Lessons Learned","text":"<p>Here's what I learned from this experience - breaking down tasks into smaller chunks is key, even when the goals are more abstract, like learning a new language. When you bundle tasks into larger blocks, it's tough to maintain motivation.</p> <p>What works for you?</p> <p>I'd love to hear your thoughts and experiences with habit-tracking apps.</p>","tags":["Reflection","productiviy"]},{"location":"projects/","title":"Projects","text":"<p>Here are some of the things I have been working on recently:</p> <ul> <li> Pok\u00e9dex CLI \u2013 A command line interface for the Pok\u00e9dex</li> <li> Web Crawler \u2013 A web crawler that generates a report to show internal linking profile and outputs a csv file with the results</li> <li> Maze Solver \u2013 Generate a maze and solve it using depth-first search</li> </ul>"},{"location":"projects/#weekend-projects","title":"Weekend Projects","text":"<p>Some of the smaller projects that I have indulged in during the weekends:</p> <ul> <li> Color Image to ASCII Art Converter in Go \u2013 A simple image to ascii art converter that allows displaying color images in the terminal</li> <li> Pong War - Yin and Yang Edition \u2013 A simple pong game written in Python</li> </ul>"},{"location":"projects/go-image2ascii/","title":"Color Image to ASCII Art Converter in Go","text":"<p>Check the source code in  github repo or Read More .</p> <p></p>","tags":["Go"]},{"location":"projects/go-image2ascii/#project-description","title":"Project Description","text":"<p>As I was working on the Pok\u00e9dex CLI project, I wanted to add the pok\u00e9mon's image in the terminal interface. I pair-programmed with GPT4 to create a simple image to ascii art converter that allows displaying color images of pok\u00e9mon in the terminal. The project is written in Go and uses half block unicode characters to represent the image.</p> <p>Since the package returns the ASCII image as a slice of strings, you can easily print it to the terminal or save it to a file. It is also possible to have your own texts printed either to the right or left of the image by appending the text to the slice of strings.</p> <p>Inspiration for this package came from image-to-ascii-art, ascii-image-converter</p>","tags":["Go"]},{"location":"projects/maze-generator-and-solver/","title":"Maze Generator and Solver","text":"<p>Check the source code in  github repo or Read More .</p> Columns: Rows:  Auto Solve  Generate Solve Stop Reset","tags":["Python","Python Tkinter","JavaScript","HTML5","HTML5 Canvas"]},{"location":"projects/maze-generator-and-solver/#project-description","title":"Project Description","text":"<p>The objective of the project is to create a maze and solve it. This is a semi-guided project from boot.dev backend developer course. Although the original project was to create the maze using Python and Tkinter - after I created the python version, I converted the python codes to javascript and HTML5 using GPT-4's assistance so that it can also run in the browser. Code for both versions are available in the github repo.</p>","tags":["Python","Python Tkinter","JavaScript","HTML5","HTML5 Canvas"]},{"location":"projects/maze-generator-and-solver/#project-impact-and-learning-outcomes","title":"Project Impact and Learning outcomes","text":"<p>This project was fun and I learned a lot in the process. This was the first time I have used Tkinter. I learned how to use the GUI library to create a simple interactive application using python. Afterwards, as I converted the python codes to javascript, I learned how to use HTML5 canvas to create a similar interactive application that can run in the browser. Since my javascript is rusty, I also learned a lot about javascript programming in the process. Having GPT-4 as assistant definitely helped a great deal in the conversion process.</p>","tags":["Python","Python Tkinter","JavaScript","HTML5","HTML5 Canvas"]},{"location":"projects/maze-generator-and-solver/#challenges-and-solutions","title":"Challenges and Solutions","text":"<p>The order of directions chosen during depth first algorithm can change how many steps are required to solve the maze based on where the \"start\" and \"finish\" are located. Original project uses the top-left cell as start and bottom-left as end. This means if you select the order \"bottom, right, left, up\" for the directions, the maze will be solved in the least number of steps. These steps can be reordered to make a very inefficient solving algorithm.</p> <p>To make things interesting for the depth first algorithm, I added randomness so that \"start\" is slected to be anywhere on the perimeter of the maze and \"finish\" is selected to be anywhere on the perimter that is at least number of (cell+row)/2 away. Press reset and generate the maze a few times to see this in action!</p>","tags":["Python","Python Tkinter","JavaScript","HTML5","HTML5 Canvas"]},{"location":"projects/maze-generator-and-solver/#future-extensions","title":"Future Extensions","text":"<ul> <li> Add emojis to make it more exciting</li> <li> Add a counter to see how many steps it took to solve the maze</li> <li> Add options to change the order of directions chosen during depth first algorithm</li> <li> Add breadth first and A* search algorithms to solve the maze</li> </ul>","tags":["Python","Python Tkinter","JavaScript","HTML5","HTML5 Canvas"]},{"location":"projects/pokedexCLI/","title":"Pok\u00e9dex CLI","text":"<p>Check the source code in  github repo or Read More .</p>","tags":["Go"]},{"location":"projects/pokedexCLI/#project-description","title":"Project Description","text":"<p>This is a semi guided project from boot.dev backend development course. The aim of the project is to create a REPL based Pok\u00e9dex. The project is written in Go and uses the PokeAPI to fetch Pok\u00e9mon data.</p>","tags":["Go"]},{"location":"projects/pokedexCLI/#learning-outcomes","title":"Learning Outcomes","text":"<ul> <li>Learn how to use JSON data in Go</li> <li>Make HTTP requests in Go to fetch data from an API</li> <li>Implement caching to reduce the number of requests made to the API</li> </ul>","tags":["Go"]},{"location":"projects/pokedexCLI/#features","title":"Features","text":"<ul> <li>map, mapb command to get Pok\u00e9mon location areas</li> <li>explore command to get details of a location and the Pok\u00e9mon that can be found there</li> <li>catch command to try catching a Pok\u00e9mon</li> <li>inspect command to get details of a Pok\u00e9mon that has been caught</li> <li>pokedex command to get a list of all Pok\u00e9mon that have been caught</li> </ul>","tags":["Go"]},{"location":"projects/pokedexCLI/#extras","title":"Extras","text":"<p>While working on this project, I wanted to add the pok\u00e9mon's image in the terminal interface. I pair-programmed with GPT4 to create a simple image to ascii art converter that allows displaying color images of pok\u00e9mon in the terminal. Read more about the ascii art converter here.</p>","tags":["Go"]},{"location":"projects/pokedexCLI/#future-improvements","title":"Future Improvements","text":"<ul> <li>Use TUI library like Bubble Tea to create a more dynamic and interactive interface</li> </ul>","tags":["Go"]},{"location":"projects/pong-war/","title":"Pong Wars - Yin Yang Edition","text":"Pong Wars - Yin Yang Edition  <p>         made by Ashraful Islam  (source :         github)         ||| Original: Koen van Gilst  (source :         github) </p>","tags":["JavaScript","HTML5 Canvas"]},{"location":"projects/web-crawler/","title":"Web Crawler","text":"<p>This is the web crawler project from boot.dev backend course. The project is written in Javascript. The crawler generates a report to show internal linking profile and outputs a csv file with the results. The crawler also generates a image showing the first calls to any path thus showing a internal site map.</p> <p>Check the source code in  github repo.</p> <p>Following is an example of the csv file generated by the crawler:</p> <pre><code>Page,Visits\n1-ashraful-islam.github.io,40\n1-ashraful-islam.github.io/tags,32\n1-ashraful-islam.github.io/projects/maze-generator-and-solver,24\n1-ashraful-islam.github.io/blog,17\n1-ashraful-islam.github.io/projects,17\n1-ashraful-islam.github.io/projects/pong-war,11\n</code></pre> <p>Following is an example of the generated image: </p>","tags":["Node.js","JavaScript"]},{"location":"projects/web-crawler/#impacts","title":"Impacts","text":"<p>The webcrawler builds internal linking profile of a website. It can be used for SEO optimization (1), user navigation analysis (2), detecting broken links (3) among other things.</p> <ol> <li>SEO Optimization: Internal links help search engines understand the structure and hierarchy of a website. Analyzing these links can help identify which pages are considered most important and how effectively the link structure supports SEO.</li> <li>User Navigation Analysis: Understanding internal linking helps in analyzing how users might navigate through a site. This can lead to improvements in user experience and site architecture.</li> <li>Detecting Broken Links: It can identify broken internal links, which are detrimental to user experience and SEO.</li> </ol>","tags":["Node.js","JavaScript"]},{"location":"projects/web-crawler/#learning","title":"Learning","text":"<p>I have learned more about web crawling, web scraping, and the use of Node.js. I have also learned how to use robots.txt to respect the website's crawling policy. I have also learned how to use JSDOM to parse HTML and extract links from the website. I have also learned how to use Jest for unit testing and mocking.</p>","tags":["Node.js","JavaScript"]},{"location":"projects/web-crawler/#limitations","title":"Limitations","text":"<p>The project requires a website to be live and accessible to the crawler. It cannot crawl websites that are behind a login or require user interaction to access the content. It also does not handle JavaScript-based content, so it may not be able to crawl websites that rely heavily on client-side rendering. Also, if the website is blocked by robots.txt, the crawler will not be able to access the site.</p> <p>Another limitation is that if the website have a lot of dynamic content it may produce some false positive. One of the issues I ran into was when crawling <code>facebook.com</code> some links would start appending <code>/help</code> indefinitely (1). I added a depth check to prevent this behavior but it is not a perfect solution.</p>","tags":["Node.js","JavaScript"]},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#go","title":"Go","text":"<ul> <li>Color Image to ASCII Art Converter in Go</li> <li>Pok\u00e9dex CLI</li> </ul>"},{"location":"tags/#html5","title":"HTML5","text":"<ul> <li>Maze Generator and Solver</li> </ul>"},{"location":"tags/#html5-canvas","title":"HTML5 Canvas","text":"<ul> <li>Maze Generator and Solver</li> <li>Pong Wars - Yin Yang Edition</li> </ul>"},{"location":"tags/#javascript","title":"JavaScript","text":"<ul> <li>Maze Generator and Solver</li> <li>Pong Wars - Yin Yang Edition</li> <li>Web Crawler</li> </ul>"},{"location":"tags/#mkdocs","title":"MkDocs","text":"<ul> <li>Easy way to add Cover Image in Material for MkDocs Blogs</li> </ul>"},{"location":"tags/#nodejs","title":"Node.js","text":"<ul> <li>Web Crawler</li> </ul>"},{"location":"tags/#python","title":"Python","text":"<ul> <li>Maze Generator and Solver</li> </ul>"},{"location":"tags/#python-tkinter","title":"Python Tkinter","text":"<ul> <li>Maze Generator and Solver</li> </ul>"},{"location":"tags/#reflection","title":"Reflection","text":"<ul> <li>Why habit apps suck, or do they?</li> </ul>"},{"location":"tags/#techtips","title":"TechTips","text":"<ul> <li>Easy way to add Cover Image in Material for MkDocs Blogs</li> </ul>"},{"location":"tags/#productiviy","title":"productiviy","text":"<ul> <li>Why habit apps suck, or do they?</li> </ul>"}]}